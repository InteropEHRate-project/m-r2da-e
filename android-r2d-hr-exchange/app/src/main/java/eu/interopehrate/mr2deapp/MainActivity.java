package eu.interopehrate.mr2deapp;

import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import java.text.SimpleDateFormat;

import eu.interopehrate.mr2da.MR2DAFactory;
import eu.interopehrate.mr2da.api.AsynchronousMR2DA;
import eu.interopehrate.protocols.common.FHIRResourceCategory;

public class MainActivity extends AppCompatActivity {

    private SimpleDateFormat dateFormatter = new SimpleDateFormat("d/M/yyyy");
    private AsynchronousMR2DA mr2da;
    private String authToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..rVLes34dZ7fNb7YsWCrOkfMwahYi-U8K7TXvS5kVHQWjuMzjJbc56v5qCr3H39g2GeJQKlw3B1_ab5tndIU_aG186jSihIJEYo7hF_vonyMKTatXO0XsjfdVU9T-W_1kISQFlyy92c2b7_YCypBTqCZZk-plV8kEnXWeHooUJr4";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button b = findViewById(R.id.executeButton);
        b.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                (new SendRequestToR2DAccess()).execute();
            }
        });

        Log.d("MR2DA.MainActivity", "Creating MR2DA instance...");
        mr2da = MR2DAFactory.createAsync("http://213.249.46.205:8080/iehr/r2da/",
                authToken, new CallbackHandler());


       /*

        // Login Button
        Button b = findViewById(R.id.login);
        b.setOnClickListener(new View.OnClickListener() {
            @Override
            // "mario.rossi"
            // "carla.verdi"
            public void onClick(View view) {
                Spinner users = (Spinner)findViewById(R.id.users);
                Spinner countries = (Spinner)findViewById(R.id.countries);

                String selectedUser = (String)users.getSelectedItem();
                String selectedCountry = (String)countries.getSelectedItem();

                Patient p = new Patient();
                if ("fake".equalsIgnoreCase(selectedCountry))
                    p.addAddress().setCountry("FKE");
                else if ("italy".equalsIgnoreCase(selectedCountry))
                    p.addAddress().setCountry("ITA");
                else if ("belgium".equalsIgnoreCase(selectedCountry))
                    p.addAddress().setCountry("BEL");
                else if ("greece".equalsIgnoreCase(selectedCountry))
                    p.addAddress().setCountry("GRC");

                // Instantiate MR2D library
                mr2d = MR2DFactory.create(p);
                // invokes login()
               (new Login()).execute(selectedUser);
            }
        });

        // Logout button
        b = findViewById(R.id.logout);
        b.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                (new Logout()).execute();
            }
        });

        b = findViewById(R.id.getAllButton);
        b.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Switch switchPS = (Switch)findViewById(R.id.switchPS);
                Switch switchLabRes = (Switch)findViewById(R.id.switchLabRes);
                Switch switchMedImg = (Switch)findViewById(R.id.switchMedImg);
                TextView dateTxt = (TextView)findViewById(R.id.dateTxt);

                // Checks if at least one Switch has been checked
                if (!switchPS.isChecked() && !switchLabRes.isChecked() && !switchMedImg.isChecked()) {
                    Snackbar snackbar = Snackbar
                            .make(findViewById(R.id.getAllButton), "Choose at least one type of HealthRecord", Snackbar.LENGTH_LONG);
                    snackbar.show();
                    return;
                }

                // Checks to see if a date has been provided by the user
                Date date = null;
                try {
                    date = dateFormatter.parse(dateTxt.getText().toString());
                } catch (ParseException e) {
                    // Log.d(getClass().getName(), "No valid date to parse.", e);
                }

                // Handles selected HealthRecordType types
                List<HealthDataType> types = new ArrayList<>();
                if (switchPS.isChecked())
                    types.add(HealthDataType.PATIENT_SUMMARY);
                if (switchLabRes.isChecked())
                    types.add(HealthDataType.LABORATORY_RESULT);
                if (switchMedImg.isChecked())
                    types.add(HealthDataType.MEDICAL_IMAGE);

                // Handles selected format
                Spinner formats = (Spinner)findViewById(R.id.formats);
                ResponseFormat format = ResponseFormat.valueOf(formats.getSelectedItem().toString());

                (new GetRecords()).execute(date, format, types.toArray(new HealthDataType[types.size()]));
            }
        });
         */
    }


    private class SendRequestToR2DAccess extends AsyncTask<Object, Void, Void> {

        @Override
        protected Void doInBackground(Object... objects) {
            try {
                mr2da.getPatientSummary();
            } catch (Exception e) {
                e.printStackTrace();
            }
            /*
            mr2da.getResourcesByCategory(FHIRResourceCategory.ENCOUNTER,
                    null, false);
             */
            return null;
        }

    }
        /*
     * ASYNC TASK #1: method MR2D.login()
     */
    /*
    private class Login extends AsyncTask<Object, Void, Void> {
        @Override
        protected Void doInBackground(Object... objects) {
            try {
                String password = "worng";
                if(objects[0].toString().equals("mario.rossi"))
                    password = "interopehrate";
                else if (objects[0].toString().equals("xavi"))
                    password = "creus";
                mr2d.login(objects[0].toString(), password);
            } catch (Exception e) {
                Log.e(getClass().getName(), e.getMessage(), e.getCause());
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            if (mr2d.isAuthenticated()) {
                findViewById(R.id.logout).setEnabled(true);
                findViewById(R.id.getAllButton).setEnabled(true);
                findViewById(R.id.login).setEnabled(false);
            }
        }
    }
    */

    /*
     * ASYNC TASK #2: method MR2D.logout()
     */
    /*
    private class Logout extends AsyncTask<Object, Void, Void> {
        @Override
        protected Void doInBackground(Object... objects) {
            mr2d.logout();
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            if (!mr2d.isAuthenticated()) {
                findViewById(R.id.login).setEnabled(true);
                findViewById(R.id.getAllButton).setEnabled(false);
                findViewById(R.id.logout).setEnabled(false);
            }
        }
    }
    */


}
